{"/home/travis/build/npmtest/node-npmtest-njwt/test.js":"/* istanbul instrument in package npmtest_njwt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-njwt/lib.npmtest_njwt.js":"/* istanbul instrument in package npmtest_njwt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_njwt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_njwt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-njwt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-njwt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_njwt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_njwt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_njwt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_njwt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_njwt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_njwt.__dirname + '/lib.npmtest_njwt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-njwt/node_modules/njwt/index.js":"'use strict';\n\nvar util = require('util');\nvar uuid = require('uuid');\nvar crypto = require('crypto');\nvar ecdsaSigFormatter = require('ecdsa-sig-formatter');\nvar properties = require('./properties.json');\n\nvar algCryptoMap = {\n  HS256: 'SHA256',\n  HS384: 'SHA384',\n  HS512: 'SHA512',\n  RS256: 'RSA-SHA256',\n  RS384: 'RSA-SHA384',\n  RS512: 'RSA-SHA512',\n  ES256: 'RSA-SHA256',\n  ES384: 'RSA-SHA384',\n  ES512: 'RSA-SHA512',\n  none: 'none'\n};\n\nvar algTypeMap = {\n  HS256: 'hmac',\n  HS384: 'hmac',\n  HS512: 'hmac',\n  RS256: 'sign',\n  RS384: 'sign',\n  RS512: 'sign',\n  ES256: 'sign',\n  ES384: 'sign',\n  ES512: 'sign'\n};\n\nfunction isECDSA(algorithm) {\n  return algorithm.indexOf('ES') === 0;\n}\n\nfunction nowEpochSeconds(){\n  return Math.floor(new Date().getTime()/1000);\n}\n\nfunction base64urlEncode(str) {\n  return new Buffer(str)\n    .toString('base64')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\nfunction base64urlUnescape(str) {\n  str += new Array(5 - str.length % 4).join('=');\n  return str.replace(/\\-/g, '+').replace(/_/g, '/');\n}\n\nfunction isSupportedAlg(alg){\n  return !!algCryptoMap[alg];\n}\n\nfunction handleError(cb,err,value){\n  if(typeof cb==='function'){\n    return process.nextTick(function() {\n      cb(err,value);\n    });\n  }else if(err){\n    throw err;\n  }else{\n    return value;\n  }\n}\n\nfunction defaultKeyResolver(kid, cb) {\n  return cb(null, this.signingKey);\n}\n\nfunction JwtError(message) {\n  this.name = 'JwtError';\n  this.message = this.userMessage = message;\n}\nutil.inherits(JwtError, Error);\n\nfunction JwtParseError(message,jwtString,parsedHeader,parsedBody,innerError) {\n  this.name = 'JwtParseError';\n  this.message = this.userMessage = message;\n  this.jwtString = jwtString;\n  this.parsedHeader = parsedHeader;\n  this.parsedBody = parsedBody;\n  this.innerError = innerError;\n}\nutil.inherits(JwtParseError, Error);\n\nfunction JwtBody(claims){\n  if(!(this instanceof JwtBody)){\n    return new JwtBody(claims);\n  }\n  var self = this;\n  if(claims){\n    Object.keys(claims).forEach(function(k){\n      self[k] = claims[k];\n    });\n  }\n  return this;\n}\n\nJwtBody.prototype.toJSON = function() {\n  var self = this;\n  return Object.keys(self).reduce(function(acc,key){\n    acc[key] = self[key];\n    return acc;\n  },{});\n};\nJwtBody.prototype.compact = function compact(){\n  return base64urlEncode(JSON.stringify(this));\n};\n\nfunction JwtHeader(header){\n  if(!(this instanceof JwtHeader)){\n    return new JwtHeader(header);\n  }\n  var self = this;\n  this.typ = header && header.typ || 'JWT';\n  this.alg = header && header.alg || 'HS256';\n\n  if(header){\n    return Object.keys(header).reduce(function(acc,key){\n      if(self.reservedKeys.indexOf(key)===-1 && header.hasOwnProperty(key)){\n        acc[key] = header[key];\n      }\n      return acc;\n    },this);\n  }else{\n    return this;\n  }\n}\nJwtHeader.prototype.reservedKeys = ['typ','alg'];\nJwtHeader.prototype.compact = function compact(){\n  return base64urlEncode(JSON.stringify(this));\n};\n\nfunction Jwt(claims, enforceDefaultFields){\n  if(!(this instanceof Jwt)){\n    return new Jwt(claims, enforceDefaultFields);\n  }\n\n  this.header = new JwtHeader();\n  this.body = new JwtBody(claims);\n\n  if (enforceDefaultFields !== false) {\n    this.setSigningAlgorithm('none');\n\n    if (!this.body.jti) {\n      this.setJti(uuid.v4());\n    }\n\n    if (!this.body.iat) {\n      this.setIssuedAt(nowEpochSeconds());\n    }\n  }\n\n  return this;\n}\nJwt.prototype.setClaim = function setClaim(claim, value) {\n  this.body[claim] = value;\n  return this;\n};\nJwt.prototype.setHeader = function setHeader(param, value) {\n  this.header[param] = value;\n  return this;\n};\nJwt.prototype.setJti = function setJti(jti) {\n  this.body.jti = jti;\n  return this;\n};\nJwt.prototype.setSubject = function setSubject(sub) {\n  this.body.sub = sub;\n  return this;\n};\nJwt.prototype.setIssuer = function setIssuer(iss) {\n  this.body.iss = iss;\n  return this;\n};\nJwt.prototype.setIssuedAt = function setIssuedAt(iat) {\n  this.body.iat = iat;\n  return this;\n};\nJwt.prototype.setExpiration = function setExpiration(exp) {\n  if(exp){\n    this.body.exp = Math.floor((exp instanceof Date ? exp : new Date(exp)).getTime() / 1000);\n  }else{\n    delete this.body.exp;\n  }\n\n  return this;\n};\nJwt.prototype.setNotBefore = function setNotBefore(nbf) {\n  if(nbf) {\n    this.body.nbf = Math.floor((nbf instanceof Date ? nbf : new Date(nbf)).getTime() / 1000);\n  } else {\n    delete this.body.nbf;\n  }\n\n  return this;\n};\nJwt.prototype.setSigningKey = function setSigningKey(key) {\n  this.signingKey = key;\n  return this;\n};\nJwt.prototype.setSigningAlgorithm = function setSigningAlgorithm(alg) {\n  if(!this.isSupportedAlg(alg)){\n    throw new JwtError(properties.errors.UNSUPPORTED_SIGNING_ALG);\n  }\n  this.header.alg = alg;\n  return this;\n};\n\nJwt.prototype.sign = function sign(payload, algorithm, cryptoInput) {\n  var buffer;\n  var signature;\n  var cryptoAlgName = algCryptoMap[algorithm];\n  var signingType = algTypeMap[algorithm];\n\n  if (!cryptoAlgName) {\n    throw new JwtError(properties.errors.UNSUPPORTED_SIGNING_ALG);\n  }\n\n  if (signingType === 'hmac') {\n    buffer = crypto.createHmac(cryptoAlgName, cryptoInput).update(payload).digest();\n  } else {\n    buffer = crypto.createSign(cryptoAlgName).update(payload).sign(cryptoInput);\n  }\n\n  if (isECDSA(algorithm)) {\n    signature = ecdsaSigFormatter.derToJose(buffer, algorithm);\n  } else {\n    signature = base64urlEncode(buffer);\n  }\n\n  return signature;\n};\n\nJwt.prototype.isSupportedAlg = isSupportedAlg;\n\nJwt.prototype.compact = function compact() {\n\n  var segments = [];\n  segments.push(this.header.compact());\n  segments.push(this.body.compact());\n\n  if(this.header.alg !== 'none'){\n    if (this.signingKey) {\n      this.signature = this.sign(segments.join('.'), this.header.alg, this.signingKey);\n      segments.push(this.signature);\n    }else{\n      throw new Error(properties.errors.SIGNING_KEY_REQUIRED);\n    }\n  }\n\n  return segments.join('.');\n};\n\nJwt.prototype.toString = function(){\n  return this.compact();\n};\n\nJwt.prototype.isExpired = function() {\n  return new Date(this.body.exp*1000) < new Date();\n};\n\nJwt.prototype.isNotBefore = function() {\n  return new Date(this.body.nbf * 1000) >= new Date();\n};\n\nfunction Parser(options){\n  return this;\n}\n\nParser.prototype.isSupportedAlg = isSupportedAlg;\nParser.prototype.safeJsonParse = function(input) {\n  var result;\n  try{\n    result = JSON.parse(new Buffer(base64urlUnescape(input),'base64'));\n  }catch(e){\n    return e;\n  }\n  return result;\n};\nParser.prototype.parse = function parse(jwtString,cb){\n\n  var done = handleError.bind(null,cb);\n  var segments = jwtString.split('.');\n  var signature;\n\n  if(segments.length<2 || segments.length>3){\n    return done(new JwtParseError(properties.errors.PARSE_ERROR,jwtString,null,null));\n  }\n\n  var header = this.safeJsonParse(segments[0]);\n  var body = this.safeJsonParse(segments[1]);\n\n  if(segments[2]){\n    signature = new Buffer(base64urlUnescape(segments[2]),'base64')\n      .toString('base64');\n  }\n\n  if(header instanceof Error){\n    return done(new JwtParseError(properties.errors.PARSE_ERROR,jwtString,null,null,header));\n  }\n  if(body instanceof Error){\n    return done(new JwtParseError(properties.errors.PARSE_ERROR,jwtString,header,null,body));\n  }\n  var jwt = new Jwt(body, false);\n  jwt.setSigningAlgorithm(header.alg);\n  jwt.signature = signature;\n  jwt.verificationInput = segments[0] +'.' + segments[1];\n  jwt.header = new JwtHeader(header);\n  return done(null,jwt);\n};\n\nfunction Verifier(){\n  if(!(this instanceof Verifier)){\n    return new Verifier();\n  }\n  this.setSigningAlgorithm('HS256');\n  this.setKeyResolver(defaultKeyResolver.bind(this));\n  return this;\n}\nVerifier.prototype.setSigningAlgorithm = function setSigningAlgorithm(alg) {\n  if(!this.isSupportedAlg(alg)){\n    throw new JwtError(properties.errors.UNSUPPORTED_SIGNING_ALG);\n  }\n  this.signingAlgorithm = alg;\n  return this;\n};\nVerifier.prototype.setSigningKey = function setSigningKey(keyStr) {\n  this.signingKey = keyStr;\n  return this;\n};\nVerifier.prototype.setKeyResolver = function setKeyResolver(keyResolver) {\n  this.keyResolver = keyResolver.bind(this);\n};\nVerifier.prototype.isSupportedAlg = isSupportedAlg;\n\nVerifier.prototype.verify = function verify(jwtString,cb){\n  var jwt;\n\n  var done = handleError.bind(null,cb);\n\n  try {\n    jwt = new Parser().parse(jwtString);\n  } catch(e) {\n    return done(e);\n  }\n\n  var body = jwt.body;\n  var header = jwt.header;\n  var signature = jwt.signature;\n\n  var cryptoAlgName = algCryptoMap[header.alg];\n  var signingType = algTypeMap[header.alg];\n\n  if (header.alg !== this.signingAlgorithm) {\n    return done(new JwtParseError(properties.errors.SIGNATURE_ALGORITHM_MISMTACH,jwtString,header,body));\n  }\n\n  if (jwt.isExpired()) {\n    return done(new JwtParseError(properties.errors.EXPIRED,jwtString,header,body));\n  }\n\n  if (jwt.isNotBefore()) {\n    return done(new JwtParseError(properties.errors.NOT_ACTIVE,jwtString,header,body));\n  }\n\n  var digstInput = jwt.verificationInput;\n  var verified, digest;\n\n  return this.keyResolver(header.kid, function(err, signingKey) {\n\n    if (err) {\n      return done(new JwtParseError(util.format(properties.errors.KEY_RESOLVER_ERROR, header.kid),jwtString,header,body, err));\n    }\n\n\n    if( cryptoAlgName==='none') {\n      verified = true;\n    } else if(signingType === 'hmac') {\n      digest = crypto.createHmac(cryptoAlgName, signingKey)\n        .update(digstInput)\n        .digest('base64');\n      verified = signature === digest;\n    } else {\n      var unescapedSignature;\n      var signatureType = undefined;\n\n      if (isECDSA(header.alg)) {\n        try {\n          unescapedSignature = ecdsaSigFormatter.joseToDer(signature, header.alg);\n        } catch (err) {\n          return done(new JwtParseError(properties.errors.SIGNATURE_MISMTACH,jwtString,header,body,err));\n        }\n      } else {\n        signatureType = 'base64';\n        unescapedSignature = base64urlUnescape(signature);\n      }\n\n      verified = crypto.createVerify(cryptoAlgName)\n        .update(digstInput)\n        .verify(signingKey, unescapedSignature, signatureType);\n    }\n\n    var newJwt = new Jwt(body, false);\n\n    newJwt.toString = function () {\n      return jwtString;\n    };\n\n    newJwt.header = new JwtHeader(header);\n\n    if (!verified) {\n      return done(new JwtParseError(properties.errors.SIGNATURE_MISMTACH,jwtString,header,body));\n    }\n\n    return done(null, newJwt);\n  });\n};\n\nVerifier.prototype.withKeyResolver = function withKeyResolver(keyResolver) {\n  this.keyResolver = keyResolver;\n  return this;\n};\n\nvar jwtLib = {\n  Jwt: Jwt,\n  JwtBody: JwtBody,\n  JwtHeader: JwtHeader,\n  Verifier: Verifier,\n  base64urlEncode: base64urlEncode,\n  base64urlUnescape:base64urlUnescape,\n  verify: function(/*jwtTokenString, [signingKey], [algOverride], [callbck] */){\n\n    var args = Array.prototype.slice.call(arguments);\n    var cb = typeof args[args.length-1] === 'function' ? args.pop() : null;\n\n    var verifier = new Verifier();\n\n    if(args.length===3){\n      verifier.setSigningAlgorithm(args[2]);\n      verifier.setSigningKey(args[1]);\n    }\n\n    if(args.length===2){\n      verifier.setSigningKey(args[1]);\n    }\n\n    if(args.length===1){\n      verifier.setSigningAlgorithm('none');\n    }\n\n    return verifier.verify(args[0], cb);\n\n  },\n  createVerifier: function(){\n    return new Verifier();\n  },\n  create: function(claims,secret,alg){\n    var args = Array.prototype.slice.call(arguments);\n    var jwt;\n    if(args.length >= 2){\n      jwt = new Jwt(claims);\n    }else if (args.length===1 && typeof claims === 'string'){\n      jwt = new Jwt({});\n      secret = claims;\n    }else{\n      jwt = new Jwt(claims);\n    }\n    if(alg!=='none' && !secret){\n      throw new Error(properties.errors.SIGNING_KEY_REQUIRED);\n    }else{\n      jwt.setSigningAlgorithm(args.length===3 ? alg : 'HS256');\n      jwt.setSigningKey(secret);\n    }\n    jwt.setExpiration((nowEpochSeconds() + (60*60))*1000); // one hour\n    return jwt;\n  }\n};\n\nmodule.exports = jwtLib;\n"}